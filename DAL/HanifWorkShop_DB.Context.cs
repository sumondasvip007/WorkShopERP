//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class HanifWorkShop_DBEntity : DbContext
    {
        public HanifWorkShop_DBEntity()
            : base("name=HanifWorkShop_DBEntity")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<tblAction> tblActions { get; set; }
        public virtual DbSet<tblBusInformation> tblBusInformations { get; set; }
        public virtual DbSet<tblBuyPartsFromSupplier> tblBuyPartsFromSuppliers { get; set; }
        public virtual DbSet<tblDesignation> tblDesignations { get; set; }
        public virtual DbSet<tblEmployeeInformation> tblEmployeeInformations { get; set; }
        public virtual DbSet<tblModule> tblModules { get; set; }
        public virtual DbSet<tblPartsInfo> tblPartsInfoes { get; set; }
        public virtual DbSet<tblPartsTransfer> tblPartsTransfers { get; set; }
        public virtual DbSet<tblRoute> tblRoutes { get; set; }
        public virtual DbSet<tblStore> tblStores { get; set; }
        public virtual DbSet<tblSupplier> tblSuppliers { get; set; }
        public virtual DbSet<tblUserActionMapping> tblUserActionMappings { get; set; }
        public virtual DbSet<tblWorkShopInformation> tblWorkShopInformations { get; set; }
        public virtual DbSet<tblWorkShopUser> tblWorkShopUsers { get; set; }
    
        public virtual ObjectResult<sp_EmployeeInformationForSpecificBusRoute_Result> sp_EmployeeInformationForSpecificBusRoute(Nullable<int> routeId)
        {
            var routeIdParameter = routeId.HasValue ?
                new ObjectParameter("routeId", routeId) :
                new ObjectParameter("routeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_EmployeeInformationForSpecificBusRoute_Result>("sp_EmployeeInformationForSpecificBusRoute", routeIdParameter);
        }
    
        public virtual ObjectResult<sp_BusInfoAndEmployeeInfoForSpecificBusRegistrationNo_Result> sp_BusInfoAndEmployeeInfoForSpecificBusRegistrationNo(string registrationNo)
        {
            var registrationNoParameter = registrationNo != null ?
                new ObjectParameter("RegistrationNo", registrationNo) :
                new ObjectParameter("RegistrationNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_BusInfoAndEmployeeInfoForSpecificBusRegistrationNo_Result>("sp_BusInfoAndEmployeeInfoForSpecificBusRegistrationNo", registrationNoParameter);
        }
    
        public virtual ObjectResult<sp_BusInfoForSpecificBusRegistrationNo_Result> sp_BusInfoForSpecificBusRegistrationNo(string registrationNo)
        {
            var registrationNoParameter = registrationNo != null ?
                new ObjectParameter("RegistrationNo", registrationNo) :
                new ObjectParameter("RegistrationNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_BusInfoForSpecificBusRegistrationNo_Result>("sp_BusInfoForSpecificBusRegistrationNo", registrationNoParameter);
        }
    
        public virtual ObjectResult<sp_PartsBuyHistoryForSpecificDateFromSupplier_Result> sp_PartsBuyHistoryForSpecificDateFromSupplier(Nullable<int> supplierId, Nullable<System.DateTime> date)
        {
            var supplierIdParameter = supplierId.HasValue ?
                new ObjectParameter("supplierId", supplierId) :
                new ObjectParameter("supplierId", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PartsBuyHistoryForSpecificDateFromSupplier_Result>("sp_PartsBuyHistoryForSpecificDateFromSupplier", supplierIdParameter, dateParameter);
        }
    
        public virtual ObjectResult<sp_totalCostHistoryFromDateToDateForABusRegistrationNo_Result> sp_totalCostHistoryFromDateToDateForABusRegistrationNo(string registrationNo, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var registrationNoParameter = registrationNo != null ?
                new ObjectParameter("registrationNo", registrationNo) :
                new ObjectParameter("registrationNo", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_totalCostHistoryFromDateToDateForABusRegistrationNo_Result>("sp_totalCostHistoryFromDateToDateForABusRegistrationNo", registrationNoParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_BusInformationListForABusRoute_Result> sp_BusInformationListForABusRoute(Nullable<int> routeId)
        {
            var routeIdParameter = routeId.HasValue ?
                new ObjectParameter("routeId", routeId) :
                new ObjectParameter("routeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_BusInformationListForABusRoute_Result>("sp_BusInformationListForABusRoute", routeIdParameter);
        }
    
        public virtual ObjectResult<sp_totalCostHistoryFromDateToDateForBusRegistrationNoFinal_Result> sp_totalCostHistoryFromDateToDateForBusRegistrationNoFinal(string registrationNo, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var registrationNoParameter = registrationNo != null ?
                new ObjectParameter("registrationNo", registrationNo) :
                new ObjectParameter("registrationNo", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_totalCostHistoryFromDateToDateForBusRegistrationNoFinal_Result>("sp_totalCostHistoryFromDateToDateForBusRegistrationNoFinal", registrationNoParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_PartsBuyHistoryFromDateToDateFromSupplier_Result> sp_PartsBuyHistoryFromDateToDateFromSupplier(Nullable<int> supplierId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var supplierIdParameter = supplierId.HasValue ?
                new ObjectParameter("supplierId", supplierId) :
                new ObjectParameter("supplierId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PartsBuyHistoryFromDateToDateFromSupplier_Result>("sp_PartsBuyHistoryFromDateToDateFromSupplier", supplierIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_totalCostHistoryFromDateToDateForBusRegistrationNoFullFinal_Result> sp_totalCostHistoryFromDateToDateForBusRegistrationNoFullFinal(string registrationNo, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var registrationNoParameter = registrationNo != null ?
                new ObjectParameter("registrationNo", registrationNo) :
                new ObjectParameter("registrationNo", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_totalCostHistoryFromDateToDateForBusRegistrationNoFullFinal_Result>("sp_totalCostHistoryFromDateToDateForBusRegistrationNoFullFinal", registrationNoParameter, fromDateParameter, toDateParameter);
        }
    }
}
